mod access_transfer;
mod arithmetic;
mod shift;

use nesmc_types::instruction::OpCode;

use crate::bus::Bus;

use super::Cpu;

impl Cpu {
    pub(super) fn exec_instruction(&mut self, bus: &mut Bus, op_code: OpCode) {
        match op_code {
            OpCode::Illegal(_) => (),
            OpCode::Jam(_) => (),
            OpCode::AdcAbs => self.instr_adc_abs(bus),
            OpCode::AdcAbsX => self.instr_adc_absx(bus),
            OpCode::AdcAbsY => self.instr_adc_absy(bus),
            OpCode::AdcImm => self.instr_adc_imm(bus),
            OpCode::AdcIndY => self.instr_adc_indy(bus),
            OpCode::AdcXInd => self.instr_adc_xind(bus),
            OpCode::AdcZpg => self.instr_adc_zpg(bus),
            OpCode::AdcZpgX => self.instr_adc_zpgx(bus),
            OpCode::AndAbs => (),
            OpCode::AndAbsX => (),
            OpCode::AndAbsY => (),
            OpCode::AndImm => (),
            OpCode::AndIndY => (),
            OpCode::AndXInd => (),
            OpCode::AndZpg => (),
            OpCode::AndZpgX => (),
            OpCode::AslA => self.instr_asl_a(),
            OpCode::AslAbs => self.instr_asl_abs(bus),
            OpCode::AslAbsX => self.instr_asl_absx(bus),
            OpCode::AslZpg => self.instr_asl_zpg(bus),
            OpCode::AslZpgX => self.instr_asl_zpgx(bus),
            OpCode::BccRel => (),
            OpCode::BcsRel => (),
            OpCode::BeqRel => (),
            OpCode::BitAbs => (),
            OpCode::BitZpg => (),
            OpCode::BmiRel => (),
            OpCode::BneRel => (),
            OpCode::BplRel => (),
            OpCode::BrkImpl => (),
            OpCode::BvcRel => (),
            OpCode::BvsRel => (),
            OpCode::ClcImpl => (),
            OpCode::CldImpl => (),
            OpCode::CliImpl => (),
            OpCode::ClvImpl => (),
            OpCode::CmpAbs => (),
            OpCode::CmpAbsX => (),
            OpCode::CmpAbsY => (),
            OpCode::CmpImm => (),
            OpCode::CmpIndY => (),
            OpCode::CmpXInd => (),
            OpCode::CmpZpg => (),
            OpCode::CmpZpgX => (),
            OpCode::CpxAbs => (),
            OpCode::CpxImm => (),
            OpCode::CpxZpg => (),
            OpCode::CpyAbs => (),
            OpCode::CpyImm => (),
            OpCode::CpyZpg => (),
            OpCode::DecAbs => self.instr_dec_abs(bus),
            OpCode::DecAbsX => self.instr_dec_absx(bus),
            OpCode::DecZpg => self.instr_dec_zpg(bus),
            OpCode::DecZpgX => self.instr_dec_zpgx(bus),
            OpCode::DexImpl => self.instr_dex_impl(),
            OpCode::DeyImpl => self.instr_dey_impl(),
            OpCode::EorAbs => (),
            OpCode::EorAbsX => (),
            OpCode::EorAbsY => (),
            OpCode::EorImm => (),
            OpCode::EorIndY => (),
            OpCode::EorXInd => (),
            OpCode::EorZpg => (),
            OpCode::EorZpgX => (),
            OpCode::IncAbs => self.instr_inc_abs(bus),
            OpCode::IncAbsX => self.instr_inc_absx(bus),
            OpCode::IncZpg => self.instr_inc_zpg(bus),
            OpCode::IncZpgX => self.instr_inc_zpgx(bus),
            OpCode::InxImpl => self.instr_inx_impl(),
            OpCode::InyImpl => self.instr_iny_impl(),
            OpCode::JmpAbs => (),
            OpCode::JmpInd => (),
            OpCode::JsrAbs => (),
            OpCode::LdaAbs => self.instr_lda_abs(bus),
            OpCode::LdaAbsX => self.instr_lda_absx(bus),
            OpCode::LdaAbsY => self.instr_lda_absy(bus),
            OpCode::LdaImm => self.instr_lda_imm(bus),
            OpCode::LdaIndY => self.instr_lda_indy(bus),
            OpCode::LdaXInd => self.instr_lda_xind(bus),
            OpCode::LdaZpg => self.instr_lda_zpg(bus),
            OpCode::LdaZpgX => self.instr_lda_zpgx(bus),
            OpCode::LdxAbs => self.instr_ldx_abs(bus),
            OpCode::LdxAbsY => self.instr_ldx_absy(bus),
            OpCode::LdxImm => self.instr_ldx_imm(bus),
            OpCode::LdxZpg => self.instr_ldx_zpg(bus),
            OpCode::LdxZpgY => self.instr_ldx_zpgy(bus),
            OpCode::LdyAbs => self.instr_ldy_abs(bus),
            OpCode::LdyAbsX => self.instr_ldy_absx(bus),
            OpCode::LdyImm => self.instr_ldy_imm(bus),
            OpCode::LdyZpg => self.instr_ldy_zpg(bus),
            OpCode::LdyZpgX => self.instr_ldy_zpgx(bus),
            OpCode::LsrA => self.instr_lsr_a(),
            OpCode::LsrAbs => self.instr_lsr_abs(bus),
            OpCode::LsrAbsX => self.instr_lsr_absx(bus),
            OpCode::LsrZpg => self.instr_lsr_zpg(bus),
            OpCode::LsrZpgX => self.instr_lsr_zpgx(bus),
            OpCode::NopImpl => self.instr_nop_impl(),
            OpCode::OraAbs => (),
            OpCode::OraAbsX => (),
            OpCode::OraAbsY => (),
            OpCode::OraImm => (),
            OpCode::OraIndY => (),
            OpCode::OraXInd => (),
            OpCode::OraZpg => (),
            OpCode::OraZpgX => (),
            OpCode::PhaImpl => (),
            OpCode::PhpImpl => (),
            OpCode::PlaImpl => (),
            OpCode::PlpImpl => (),
            OpCode::RolA => self.instr_rol_a(),
            OpCode::RolAbs => self.instr_rol_abs(bus),
            OpCode::RolAbsX => self.instr_rol_absx(bus),
            OpCode::RolZpg => self.instr_rol_zpg(bus),
            OpCode::RolZpgX => self.instr_rol_zpgx(bus),
            OpCode::RorA => self.instr_ror_a(),
            OpCode::RorAbs => self.instr_ror_abs(bus),
            OpCode::RorAbsX => self.instr_ror_absx(bus),
            OpCode::RorZpg => self.instr_ror_zpg(bus),
            OpCode::RorZpgX => self.instr_ror_zpgx(bus),
            OpCode::RtiImpl => (),
            OpCode::RtsImpl => (),
            OpCode::SbcAbs => self.instr_sbc_abs(bus),
            OpCode::SbcAbsX => self.instr_sbc_absx(bus),
            OpCode::SbcAbsY => self.instr_sbc_absy(bus),
            OpCode::SbcImm => self.instr_sbc_imm(bus),
            OpCode::SbcIndY => self.instr_sbc_indy(bus),
            OpCode::SbcXInd => self.instr_sbc_xind(bus),
            OpCode::SbcZpg => self.instr_sbc_zpg(bus),
            OpCode::SbcZpgX => self.instr_sbc_zpgx(bus),
            OpCode::SecImpl => (),
            OpCode::SedImpl => (),
            OpCode::SeiImpl => (),
            OpCode::StaAbs => self.instr_sta_abs(bus),
            OpCode::StaAbsX => self.instr_sta_absx(bus),
            OpCode::StaAbsY => self.instr_sta_absy(bus),
            OpCode::StaIndY => self.instr_sta_indy(bus),
            OpCode::StaXInd => self.instr_sta_xind(bus),
            OpCode::StaZpg => self.instr_sta_zpg(bus),
            OpCode::StaZpgX => self.instr_sta_zpgx(bus),
            OpCode::StxAbs => self.instr_stx_abs(bus),
            OpCode::StxZpg => self.instr_stx_zpg(bus),
            OpCode::StxZpgY => self.instr_stx_zpgy(bus),
            OpCode::StyAbs => self.instr_sty_abs(bus),
            OpCode::StyZpg => self.instr_sty_zpg(bus),
            OpCode::StyZpgX => self.instr_sty_zpgx(bus),
            OpCode::TaxImpl => self.instr_tax_impl(),
            OpCode::TayImpl => self.instr_tay_impl(),
            OpCode::TsxImpl => (),
            OpCode::TxaImpl => self.instr_txa_impl(),
            OpCode::TxsImpl => (),
            OpCode::TyaImpl => self.instr_tya_impl(),
        }
    }

    fn instr_nop_impl(&self) {
        // waste of time
    }
}
