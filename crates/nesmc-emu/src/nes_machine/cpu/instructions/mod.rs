mod access_transfer;
mod arithmetic;
mod bitwise;
mod branching;
mod comparison;
mod flags;
mod illegal;
mod shift;

use nesmc_types::instruction::OpCode;

use crate::bus::Bus;

use super::Cpu;

impl Cpu {
    pub(super) fn exec_instruction(&mut self, bus: &mut Bus, op_code: OpCode) {
        match op_code {
            // Illegal
            OpCode::Illegal(_) => (),
            OpCode::Jam => (),
            OpCode::NopImm => self.instr_nop_imm(bus),
            OpCode::NopAbs => self.instr_nop_abs(bus),
            OpCode::NopAbsX => self.instr_nop_absx(bus),
            OpCode::NopZpg => self.instr_nop_zpg(bus),
            OpCode::NopZpgX => self.instr_nop_zpgx(bus),
            OpCode::LaxAbs => self.instr_lax_abs(bus),
            OpCode::LaxAbsY => self.instr_lax_absy(bus),
            OpCode::LaxXInd => self.instr_lax_xind(bus),
            OpCode::LaxIndY => self.instr_lax_indy(bus),
            OpCode::LaxZpg => self.instr_lax_zpg(bus),
            OpCode::LaxZpgY => self.instr_lax_zpgy(bus),
            OpCode::SaxAbs => self.instr_sax_abs(bus),
            OpCode::SaxXInd => self.instr_sax_xind(bus),
            OpCode::SaxZpg => self.instr_sax_zpg(bus),
            OpCode::SaxZpgY => self.instr_sax_zpgy(bus),
            OpCode::DcpAbs => self.instr_dcp_abs(bus),
            OpCode::DcpAbsX => self.instr_dcp_absx(bus),
            OpCode::DcpAbsY => self.instr_dcp_absy(bus),
            OpCode::DcpXInd => self.instr_dcp_xind(bus),
            OpCode::DcpIndY => self.instr_dcp_indy(bus),
            OpCode::DcpZpg => self.instr_dcp_zpg(bus),
            OpCode::DcpZpgX => self.instr_dcp_zpgx(bus),
            OpCode::IscAbs => self.instr_isc_abs(bus),
            OpCode::IscAbsX => self.instr_isc_absx(bus),
            OpCode::IscAbsY => self.instr_isc_absy(bus),
            OpCode::IscXInd => self.instr_isc_xind(bus),
            OpCode::IscIndY => self.instr_isc_indy(bus),
            OpCode::IscZpg => self.instr_isc_zpg(bus),
            OpCode::IscZpgX => self.instr_isc_zpgx(bus),
            OpCode::SloAbs => self.instr_slo_abs(bus),
            OpCode::SloAbsX => self.instr_slo_absx(bus),
            OpCode::SloAbsY => self.instr_slo_absy(bus),
            OpCode::SloXInd => self.instr_slo_xind(bus),
            OpCode::SloIndY => self.instr_slo_indy(bus),
            OpCode::SloZpg => self.instr_slo_zpg(bus),
            OpCode::SloZpgX => self.instr_slo_zpgx(bus),
            OpCode::RlaAbs => self.instr_rla_abs(bus),
            OpCode::RlaAbsX => self.instr_rla_absx(bus),
            OpCode::RlaAbsY => self.instr_rla_absy(bus),
            OpCode::RlaXInd => self.instr_rla_xind(bus),
            OpCode::RlaIndY => self.instr_rla_indy(bus),
            OpCode::RlaZpg => self.instr_rla_zpg(bus),
            OpCode::RlaZpgX => self.instr_rla_zpgx(bus),
            OpCode::RraAbs => self.instr_rra_abs(bus),
            OpCode::RraAbsX => self.instr_rra_absx(bus),
            OpCode::RraAbsY => self.instr_rra_absy(bus),
            OpCode::RraXInd => self.instr_rra_xind(bus),
            OpCode::RraIndY => self.instr_rra_indy(bus),
            OpCode::RraZpg => self.instr_rra_zpg(bus),
            OpCode::RraZpgX => self.instr_rra_zpgx(bus),
            OpCode::SreAbs => self.instr_sre_abs(bus),
            OpCode::SreAbsX => self.instr_sre_absx(bus),
            OpCode::SreAbsY => self.instr_sre_absy(bus),
            OpCode::SreXInd => self.instr_sre_xind(bus),
            OpCode::SreIndY => self.instr_sre_indy(bus),
            OpCode::SreZpg => self.instr_sre_zpg(bus),
            OpCode::SreZpgX => self.instr_sre_zpgx(bus),

            // Legal
            OpCode::AdcAbs => self.instr_adc_abs(bus),
            OpCode::AdcAbsX => self.instr_adc_absx(bus),
            OpCode::AdcAbsY => self.instr_adc_absy(bus),
            OpCode::AdcImm => self.instr_adc_imm(bus),
            OpCode::AdcIndY => self.instr_adc_indy(bus),
            OpCode::AdcXInd => self.instr_adc_xind(bus),
            OpCode::AdcZpg => self.instr_adc_zpg(bus),
            OpCode::AdcZpgX => self.instr_adc_zpgx(bus),
            OpCode::AndAbs => self.instr_and_abs(bus),
            OpCode::AndAbsX => self.instr_and_absx(bus),
            OpCode::AndAbsY => self.instr_and_absy(bus),
            OpCode::AndImm => self.instr_and_imm(bus),
            OpCode::AndIndY => self.instr_and_indy(bus),
            OpCode::AndXInd => self.instr_and_xind(bus),
            OpCode::AndZpg => self.instr_and_zpg(bus),
            OpCode::AndZpgX => self.instr_and_zpgx(bus),
            OpCode::AslA => self.instr_asl_a(),
            OpCode::AslAbs => self.instr_asl_abs(bus),
            OpCode::AslAbsX => self.instr_asl_absx(bus),
            OpCode::AslZpg => self.instr_asl_zpg(bus),
            OpCode::AslZpgX => self.instr_asl_zpgx(bus),
            OpCode::BccRel => self.instr_bcc_rel(bus),
            OpCode::BcsRel => self.instr_bcs_rel(bus),
            OpCode::BeqRel => self.instr_beq_rel(bus),
            OpCode::BitAbs => self.instr_bit_abs(bus),
            OpCode::BitZpg => self.instr_bit_zpg(bus),
            OpCode::BmiRel => self.instr_bmi_rel(bus),
            OpCode::BneRel => self.instr_bne_rel(bus),
            OpCode::BplRel => self.instr_bpl_rel(bus),
            OpCode::BrkImpl => self.instr_brk_impl(bus),
            OpCode::BvcRel => self.instr_bvc_rel(bus),
            OpCode::BvsRel => self.instr_bvs_rel(bus),
            OpCode::ClcImpl => self.instr_clc(),
            OpCode::CldImpl => self.instr_cld(),
            OpCode::CliImpl => self.instr_cli(),
            OpCode::ClvImpl => self.instr_clv(),
            OpCode::CmpAbs => self.instr_cmp_abs(bus),
            OpCode::CmpAbsX => self.instr_cmp_absx(bus),
            OpCode::CmpAbsY => self.instr_cmp_absy(bus),
            OpCode::CmpImm => self.instr_cmp_imm(bus),
            OpCode::CmpIndY => self.instr_cmp_indy(bus),
            OpCode::CmpXInd => self.instr_cmp_xind(bus),
            OpCode::CmpZpg => self.instr_cmp_zpg(bus),
            OpCode::CmpZpgX => self.instr_cmp_zpgx(bus),
            OpCode::CpxAbs => self.instr_cpx_abs(bus),
            OpCode::CpxImm => self.instr_cpx_imm(bus),
            OpCode::CpxZpg => self.instr_cpx_zpg(bus),
            OpCode::CpyAbs => self.instr_cpy_abs(bus),
            OpCode::CpyImm => self.instr_cpy_imm(bus),
            OpCode::CpyZpg => self.instr_cpy_zpg(bus),
            OpCode::DecAbs => self.instr_dec_abs(bus),
            OpCode::DecAbsX => self.instr_dec_absx(bus),
            OpCode::DecZpg => self.instr_dec_zpg(bus),
            OpCode::DecZpgX => self.instr_dec_zpgx(bus),
            OpCode::DexImpl => self.instr_dex_impl(),
            OpCode::DeyImpl => self.instr_dey_impl(),
            OpCode::EorAbs => self.instr_eor_abs(bus),
            OpCode::EorAbsX => self.instr_eor_absx(bus),
            OpCode::EorAbsY => self.instr_eor_absy(bus),
            OpCode::EorImm => self.instr_eor_imm(bus),
            OpCode::EorIndY => self.instr_eor_indy(bus),
            OpCode::EorXInd => self.instr_eor_xind(bus),
            OpCode::EorZpg => self.instr_eor_zpg(bus),
            OpCode::EorZpgX => self.instr_eor_zpgx(bus),
            OpCode::IncAbs => self.instr_inc_abs(bus),
            OpCode::IncAbsX => self.instr_inc_absx(bus),
            OpCode::IncZpg => self.instr_inc_zpg(bus),
            OpCode::IncZpgX => self.instr_inc_zpgx(bus),
            OpCode::InxImpl => self.instr_inx_impl(),
            OpCode::InyImpl => self.instr_iny_impl(),
            OpCode::JmpAbs => self.instr_jmp_abs(bus),
            OpCode::JmpInd => self.instr_jmp_ind(bus),
            OpCode::JsrAbs => self.instr_jsr_abs(bus),
            OpCode::LdaAbs => self.instr_lda_abs(bus),
            OpCode::LdaAbsX => self.instr_lda_absx(bus),
            OpCode::LdaAbsY => self.instr_lda_absy(bus),
            OpCode::LdaImm => self.instr_lda_imm(bus),
            OpCode::LdaIndY => self.instr_lda_indy(bus),
            OpCode::LdaXInd => self.instr_lda_xind(bus),
            OpCode::LdaZpg => self.instr_lda_zpg(bus),
            OpCode::LdaZpgX => self.instr_lda_zpgx(bus),
            OpCode::LdxAbs => self.instr_ldx_abs(bus),
            OpCode::LdxAbsY => self.instr_ldx_absy(bus),
            OpCode::LdxImm => self.instr_ldx_imm(bus),
            OpCode::LdxZpg => self.instr_ldx_zpg(bus),
            OpCode::LdxZpgY => self.instr_ldx_zpgy(bus),
            OpCode::LdyAbs => self.instr_ldy_abs(bus),
            OpCode::LdyAbsX => self.instr_ldy_absx(bus),
            OpCode::LdyImm => self.instr_ldy_imm(bus),
            OpCode::LdyZpg => self.instr_ldy_zpg(bus),
            OpCode::LdyZpgX => self.instr_ldy_zpgx(bus),
            OpCode::LsrA => self.instr_lsr_a(),
            OpCode::LsrAbs => self.instr_lsr_abs(bus),
            OpCode::LsrAbsX => self.instr_lsr_absx(bus),
            OpCode::LsrZpg => self.instr_lsr_zpg(bus),
            OpCode::LsrZpgX => self.instr_lsr_zpgx(bus),
            OpCode::NopImpl => self.instr_nop_impl(),
            OpCode::OraAbs => self.instr_ora_abs(bus),
            OpCode::OraAbsX => self.instr_ora_absx(bus),
            OpCode::OraAbsY => self.instr_ora_absy(bus),
            OpCode::OraImm => self.instr_ora_imm(bus),
            OpCode::OraIndY => self.instr_ora_indy(bus),
            OpCode::OraXInd => self.instr_ora_xind(bus),
            OpCode::OraZpg => self.instr_ora_zpg(bus),
            OpCode::OraZpgX => self.instr_ora_zpgx(bus),
            OpCode::PhaImpl => self.instr_pha_impl(bus),
            OpCode::PhpImpl => self.instr_php_impl(bus),
            OpCode::PlaImpl => self.instr_pla_impl(bus),
            OpCode::PlpImpl => self.instr_plp_impl(bus),
            OpCode::RolA => self.instr_rol_a(),
            OpCode::RolAbs => self.instr_rol_abs(bus),
            OpCode::RolAbsX => self.instr_rol_absx(bus),
            OpCode::RolZpg => self.instr_rol_zpg(bus),
            OpCode::RolZpgX => self.instr_rol_zpgx(bus),
            OpCode::RorA => self.instr_ror_a(),
            OpCode::RorAbs => self.instr_ror_abs(bus),
            OpCode::RorAbsX => self.instr_ror_absx(bus),
            OpCode::RorZpg => self.instr_ror_zpg(bus),
            OpCode::RorZpgX => self.instr_ror_zpgx(bus),
            OpCode::RtiImpl => self.instr_rti_impl(bus),
            OpCode::RtsImpl => self.instr_rts_impl(bus),
            OpCode::SbcAbs => self.instr_sbc_abs(bus),
            OpCode::SbcAbsX => self.instr_sbc_absx(bus),
            OpCode::SbcAbsY => self.instr_sbc_absy(bus),
            OpCode::SbcImm => self.instr_sbc_imm(bus),
            OpCode::SbcIndY => self.instr_sbc_indy(bus),
            OpCode::SbcXInd => self.instr_sbc_xind(bus),
            OpCode::SbcZpg => self.instr_sbc_zpg(bus),
            OpCode::SbcZpgX => self.instr_sbc_zpgx(bus),
            OpCode::SecImpl => self.instr_sec(),
            OpCode::SedImpl => self.instr_sed(),
            OpCode::SeiImpl => self.instr_sei(),
            OpCode::StaAbs => self.instr_sta_abs(bus),
            OpCode::StaAbsX => self.instr_sta_absx(bus),
            OpCode::StaAbsY => self.instr_sta_absy(bus),
            OpCode::StaIndY => self.instr_sta_indy(bus),
            OpCode::StaXInd => self.instr_sta_xind(bus),
            OpCode::StaZpg => self.instr_sta_zpg(bus),
            OpCode::StaZpgX => self.instr_sta_zpgx(bus),
            OpCode::StxAbs => self.instr_stx_abs(bus),
            OpCode::StxZpg => self.instr_stx_zpg(bus),
            OpCode::StxZpgY => self.instr_stx_zpgy(bus),
            OpCode::StyAbs => self.instr_sty_abs(bus),
            OpCode::StyZpg => self.instr_sty_zpg(bus),
            OpCode::StyZpgX => self.instr_sty_zpgx(bus),
            OpCode::TaxImpl => self.instr_tax_impl(),
            OpCode::TayImpl => self.instr_tay_impl(),
            OpCode::TsxImpl => self.instr_tsx_impl(),
            OpCode::TxaImpl => self.instr_txa_impl(),
            OpCode::TxsImpl => self.instr_txs_impl(),
            OpCode::TyaImpl => self.instr_tya_impl(),
        }
    }

    fn instr_nop_impl(&self) {
        // waste of time
    }
}
